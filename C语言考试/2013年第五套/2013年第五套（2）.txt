void  GenStr(char s[],char t[])
{
/**********Program**********/
   int i,k=0;
   char ls[20];
   t[0]=0;
   for(i=strlen(s)-1;i>=0;i--)
      {
         if(i!=0&&((isalpha(s[i])==isalpha(s[i-1]))||(isdigit(s[i])==isdigit(s[i-1]))))   /*未到最前面一个字符并且当前字符与下面要处理的字符属于同一个类型*/
               ls[k++]=s[i];
         if(i!=0&&((isalpha(s[i])!=isalpha(s[i-1]))||(isdigit(s[i])!=isdigit(s[i-1]))))   /*未到最前面一个字符并且当前字符与下面一个要处理的字符不一样*/
               {
                 ls[k++]=s[i];
                 ls[k]=0;
                 strcat(t,ls);
                 strcat(t,ls);
                 k=0;
               }
         if(i==0&&((isalpha(s[i])==isalpha(s[i+1]))||(isdigit(s[i])==isdigit(s[i+1]))))    /*已经到了最前面一个字符并且当前字符同刚刚处理的字符的类型一样*/
               {
                 ls[k++]=s[i];
                 ls[k]=0;
                 strcat(t,ls);
                 strcat(t,ls);
               }
         if(i==0&&((isalpha(s[i])!=isalpha(s[i+1]))||(isdigit(s[i])!=isdigit(s[i+1]))))    /*已经到了最前面一个字符并且当前字符同刚刚处理的字符的类型不一样也就是说这是个新字符*/
               {
                 ls[0]=s[i];
                 ls[1]=0;
                 strcat(t,ls);
                 strcat(t,ls);
               }
      }
/**********  End  **********/
}

int Calculate(char t[],int b[])
{
/**********Program**********/
int i,flag=0,k=0,s=0;
    for(i=0;t[i];i++) 
     {
       if(isdigit(t[i])&&!flag)            /*到达了数字字符开始的时候*/
           {
              s=s+t[i]-'0';
			  if(isalpha(t[i+1]))
				 b[k++]=s; 
           }
	   if(isdigit(t[i])&&flag)                        /*数字字符的中间部分*/
	   {
		   s=s+t[i]-'0';
		   if(isalpha(t[i+1]))
			    b[k++]=s;
	   }
       if(isalpha(t[i]))                   /*假如到了字符需要给下一次做准备*/
	   {
		   flag=0;
		   s=0;
	   }
       if(isdigit(t[i]))                   
	   {
		   flag=1;
	   }
     }
    return k;
/**********  End  **********/
}
